Object Classification
#####################

This tutorial will guide you through generating source codes
for object classification tasks using the **cvtk** package,
building a model for classification,
and performing inference on the constructed model.
Note that the **PyTorch** package is internally used in **cvtk** for this feature.
Please ensure that **PyTorch** is installed correctly
without any errors before using the **cvtk** package.


Source Code Preparation
***********************

To generate Python source code, use the ``cvtk create`` command.
For those new to programming or deep learning,
it is recommended to run the following command to generate simple source code.
The code generated by this command contains only the essential processes,
with all complex processes imported from the **cvtk** package.
This makes the source code easy to read and helps in
understanding the flow of deep learning for beginners.


.. code-block:: sh
    
    cvtk create --script cls.py --task cls


By default, ResNet18 (``resnet18`` for ``torchvision.models.resnet18``) is used.
Users can change the ``'resnet18'`` part to any other network architecture
by replacing it with another string in the generated source code.
Available network architectures can be found on the PyTroch website
(e.g., `Models and pre-trained weights <https://pytorch.org/vision/main/models.html>`_).


In addition, for those who are already familiar with deep learning,
it is recommended to run the following command
(``cvtk create`` with the argument ``--vanilla``)
to generate source code that uses only the **PyTorch** package functions.
Users can then customize the source code generated by this command to suit their needs.
For example, users can add various processes
such as data augmentation, optimization algorithms, and loss functions.


.. code-block:: sh
    
    cvtk create --script cls.py --task cls --vanilla




Model Training and Validation
*****************************

To train the model, open the source code generated above and execute it by providing training,
validation, and test data to the input of the ``train`` function.

Alternatively, the source code can be executed directly from the command line as follows:


.. code-block:: sh

    python cls.py train \
        --label ./data/fruits/label.txt \
        --train ./data/fruits/train.txt \
        --valid ./data/fruits/valid.txt \
        --test ./data/fruits/test.txt \
        --output_weights ./outputs/fruits.pth


The weights of the trained model will be saved in :file:`fruits.pth`,
and the loss and accuracy data during the training process will be saved in
:file:`fruits.train_stats.txt`.

If the test data is provided,
the model will be evaluated using the test data.
The test results will be saved in :file:`fruits.test_outputs.txt`
and performance metrics (i.e., confusion matrix)
will be saved in :file:`fruits.test_outputs.cm.json`.




Inference
*********

To perform inference using the constructed model,
refer to the ``inference`` function in the source code.

Alternatively, it can also be executed directly from the command line as follows:


.. code-block:: sh

    python cls.py inference \
        --label ./data/fruits/label.txt \
        --data ./data/fruits/test.txt \
        --model_weights ./outputs/fruits.pth \
        --output ./outputs/fruits.inference_results.txt




