Object Detection
################

Object detection combines classification and localization
to identify objects in an image and specify their locations through bounding boxes.
This tutorial will guide you through creating source codes for object detection tasks
using the **cvtk** package,
building a model for detecting objects, and performing inference on the constructed model.

Note that the **MMDetection** package is internally used in **cvtk** for object detection.
Ensure that **MMDetection** is installed correctly without any errors before using the **cvtk** package.


Source Code Preparation
***********************

To generate Python source code,
use the ``cvtk create`` command.
For those new to programming or deep learning,
it is recommended to run the following command to generate simple source code.
The code generated by this command contains only the essential processes,
with all complex processes imported from the **cvtk** package.
This makes the source code easy to read and helps in
understanding the flow of deep learning for beginners.



.. code-block:: sh
    
    cvtk create --script det.py --task det


By default, Faster RCNN (``faster-rcnn_r101_fpn_1x_coco``) is used.
Users can change the ``'faster-rcnn_r101_fpn_1x_coco'`` part to any other network architecture
by replacing it with another string in the generated source code.
Available network architectures can be found on the MMDet GitHub repository
(e.g., `mmdetection.configs <https://github.com/open-mmlab/mmdetection/tree/main/configs>`_)
or search by using the ``mim search`` command (e.g., ``mim search mmdet --model "r-cnn"``).


For those who are already familiar with deep learning,
it is recommended to run the following command
(``cvtk create`` with the argument ``--vanilla``)
to generate source code that uses only the **MMDetection** package functions.
Users can then customize the source code generated by this command to suit their needs.
For example, users can add various processes
such as data augmentation, optimization algorithms, and loss functions.


.. code-block:: sh
    
    cvtk create --script det.py --task det --vanilla



Model Training and Validation
*****************************

To train the model, open the source code generated above and execute it by providing training,
validation, and test data to the input of the ``train`` function.

Alternatively, the source code can be executed directly from the command line as follows:

.. code-block:: sh

    python det.py train \
        --label ./data/strawberry/label.txt \
        --train ./data/strawberry/train/bbox.json \
        --valid ./data/strawberry/valid/bbox.json \
        --test ./data/strawberry/test/bbox.json \
        --output_weights ./outputs/strawberry.pth


The weights of the trained model will be saved in :file:`strawberry.pth`,
and the loss and accuracy data during the training process will be saved in
:file:`strawberry.train_stats.train.txt` and :file:`strawberry.train_stats.valid.txt`.
Additionally, if the test data is provided,
the model will be evaluated using the test data.
The test performance metrics (e.g., mAP) will be saved in :file:`strawberry.test_stats.json`.


Inference
*********

To perform inference using the constructed model,
refer to the ``inference`` function in the source code.

Alternatively, it can also be executed directly from the command line as follows:

.. code-block:: sh

    python det.py inference \
        --label ./data/fruits/label.txt \
        --data ./data/fruits/test.txt \
        --model_weights ./outputs/strawberry.pth \
        --output ./outputs/strawberry_inference_results.txt

