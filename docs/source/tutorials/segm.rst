Instance Segmentation
#####################

This tutorial is for building an instance segmentation model using the cvtk package.
Note that, MMDetection package is internally used in cvtk for instance segmentation.

Source Code Preparation
***********************

To generate Python source code, use the :command:`cvtk create` command.
For those new to deep learning,
it is recommended to run the following command to generate simple source code.
he code generated by this command contains only the essential processes,
with all complex processes imported from the cvtk package.
This makes the source code easy to read and helps in understanding the flow of deep learning.


.. code-block:: sh
    
    cvtk create --script segm.py --type segm


The source code generated by the above command is simple but difficult to customize.
If you want to add various processes,
such as data augmentation, optimization algorithms, and loss functions,
run :command:`cvtk create` command with argument :command:`--module vanilla` to generate source code
that is complete using only the torch package functions.


.. code-block:: sh
    
    cvtk create --script segm.py --type segm --module vanilla




Model Training and Validation
*****************************

To train the model,
open the source code generated above and execute it
by providing training data, validation data,
and test data to the input of the :code:`train` function.
It can also be executed directly from the command line as follows:



.. code-block:: sh

    python segm.py train \
        --label ./data/strawberry/label.txt \
        --train ./data/strawberry/train/segm.json \
        --valid ./data/strawberry/valid/segm.json \
        --test ./data/strawberry/test/segm.json \
        --output_weights ./output/strawberry.pth


The weights of the trained model will be saved in :file:`strawberry.pth`,
and the loss and accuracy data during the training process
will be saved in :file:`strawberry.train_stats.train.txt` and  :file:`strawberry.train_stats.valid.txt`.


If one wants to visualize the changes in loss and accuracy during the training process,
open the source code and add the code for plotting the graph
at the end of the train function (i.e., below the :code:`save` function).
For example, as follows:




Inference
*********

To perform inference using the constructed model,
refer to the :code:`inference` function in the source code.
It can also be executed directly from the command line as follows:


.. code-block:: sh

    python segm.py inference \
        --label ./data/fruits/label.txt \
        --data ./data/fruits/test.txt \
        --model_weights ./output/strawberry.pth \
        --output ./output/strawberry_inference_results.txt


